-- Divide and Conquer --

Define changeslowhelper(currency[], amount)    // currency = array of coin denominations
										 //	amount = int, total amount we're making change for
	if amount == 0
		return 0
	for each coin in currency
		if coin == amount
			return [coin]
			
	for i to amount/2
		temp.extend(changeslowhelper(currency, i))
		temp.extend(changeslowhelper(currency, amount - 1))
		numCoins = length of temp
		
		if numCoins < minCoins
			coins = temp
	
	return coins
	
Define changeslow(currency[], amount)
	coins = changeslowhelper(currency[], amount)
	
	for each coin in currency
		result.append(coins.count(coin))
	
	return result
	
==========================================================================================
==========================================================================================
-- Greedy --

Define changegreedy (currency[], amount) // currency = array of coin denominations
										 //	amount = int, total amount we're making change for

	int num
	
	for i to currency.length
		
		if currency[i] <= amount
			num = amount / currency[i]
			numArray[i] = numArray[i] + num
			total = total + num
			amount -= num * currency[i]
	
	numArray.append(total)  # sending the total through on the end of the array
							# then we'll strip it off in the main function
	return numArray





==========================================================================================
==========================================================================================
-- Dynamic Programming --

Define changedp (currency[], amount)

	table[][] = 1 // initialize table that we'll use to store results in

	for i to amount+1
		for j to currency.length
			if i + currency[j] <= amount
				table[i+currency[j]][j] += table[i][j]
			table[i][j+1] += table[i][j]
			
	return table[amount]
		